"""
Django settings for prototype_1 project.

The platform can be locally hosted for debugging and externally hosted on a Heroku
server.

These settings are common to both of those arrangements.

See settings_development.py for settings that are specific to localhost development
See settings_staging.py for settings that are specificy to QA hosted on Heroku
See settings_production.py for for settings that are specific to Production hosted on Heroku

Initially generated by 'django-admin startproject' using Django 1.10.4.
Manually customized for our needs.

"""

import os
#from custom_storages import *

#Set the deployment Environment
DEPLOYMENT_ENVIRONMENT = os.environ.get('LOOPLA_DEPLOYMENT_ENVIRONMENT')
BASE_URL = ''

if (DEPLOYMENT_ENVIRONMENT == 'DEVELOPMENT'):
    BASE_URL = 'http://127.0.0.1:8000'

if (DEPLOYMENT_ENVIRONMENT == 'STAGING'):
    BASE_URL = '<staging base url>'

if (DEPLOYMENT_ENVIRONMENT == 'PRODUCTION'):
    BASE_URL = '<production base url>'



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

import datetime

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '<some secret key>'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('LOOPLA_DEBUG_MODE_ENABLED') == 'True'

INTERNAL_IPS = ['127.0.0.1', 'localhost',]

AUTHENTICATION_BACKENDS = (

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
    # `allauth` specific authentication methods, such as login by e-mail
    #'allauth.account.auth_backends.AuthenticationBackend',

)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'collectfast', #3d party app Collectfast - must come before 'django.contrib.staticfiles'
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',

    #3rd party apps
    'mptt',   #modified pre-order tree traversal
    'bootstrap3', #framework for front-end / UI
    'storages', #API for AWS S3 storage
    'localflavor', #pieces of code that are useful for particular countries
    'widget_tweaks', #enables fine control over html forms
    'imagekit', #image processing tools (resizing, etc.)
    'mathfilters', #Django template filters for simple arithmetic
    'nexmo', #SMS texting through Nexmo
    'phonenumber_field', #package for handling phone numbers
#    'debug_toolbar', #package for profiling performance
    'django_extensions', #Includes more profiling tools

    'allauth',            # enables login through Google, FB, Twitter, Amazon, etc.
    'allauth.account',    # enables email verification for sign-up
    'allauth.socialaccount', # enable reseting of passwords

    'allauth.socialaccount.providers.amazon', # login through Amazon
    'allauth.socialaccount.providers.facebook', # login through Facebook
    'allauth.socialaccount.providers.google', # login through Google
    'allauth.socialaccount.providers.linkedin', # login through LinkedIn
    'allauth.socialaccount.providers.twitter', # login through Twitter
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',

#    'invitations', #enables processing of email invitations.

    #my apps
    'dashboard',
    'users',
    'groups',
    'itk_invitations',
    'landing_page',
    'actions',
    'api_v1',
    'frontend_v1',
    'django_rq',
    'shop',
    'commands',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # after
    'django.middleware.gzip.GZipMiddleware',
#    'debug_toolbar.middleware.DebugToolbarMiddleware',
#    'whitenoise.middleware.WhiteNoiseMiddleware', # after
    'django.contrib.sessions.middleware.SessionMiddleware',# after
    'django.middleware.common.CommonMiddleware', # after
    # 'django.middleware.csrf.CsrfViewMiddleware', # after
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # after
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]


DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    # Excluding staticfiles panel
    # See https://stackoverflow.com/questions/21881749/django-debug-toolbar-cant-make-it-work-improperlyconfigured-the-staticfiles
    # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

ROOT_URLCONF = 'prototype_1.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'api_v1/emails/')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                #'django.template.context_processors.csrf',
            ],
        #    'string_if_invalid': 'Invalid: "%s"',
        },
    },
]

WSGI_APPLICATION = 'prototype_1.wsgi.application'

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = '<email host user address>'
EMAIL_HOST_PASSWORD = '<email host user password>'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_FAIL_SILENTLY = False
SERVER_EMAIL = '<server email address>'
DEFAULT_FROM_EMAIL = '<default address to send from in format: name <address> >'

PHONENUMBER_DB_FORMAT = 'E164'
PHONENUMBER_DEFAULT_REGION = 'US'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        'api_v1.authentication.ExpiringTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('LOOPLA_DATABASE_ENGINE'),
        'NAME': os.environ.get('LOOPLA_DATABASE_NAME'),
        'USER': os.environ.get('LOOPLA_DATABASE_USER'),
        'PASSWORD': os.environ.get('LOOPLA_DATABASE_PASSWORD'),
        'HOST': os.environ.get('LOOPLA_DATABASE_HOST'),
        'PORT': os.environ.get('LOOPLA_DATABASE_PORT')
    }
}

if (DEPLOYMENT_ENVIRONMENT != 'DEVELOPMENT'):
    DATABASES['default']['OPTIONS'] = { 'sslmode': 'require' }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

NEXMO_API_KEY = os.environ.get('LOOPLA_NEXMO_API_KEY')
NEXMO_API_SECRET = os.environ.get('LOOPLA_NEXMO_API_SECRET')
NEXMO_DEFAULT_FROM = os.environ.get('LOOPLA_NEXMO_DEFAULT_FROM')


#ACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'
# Probably don't need this but afraid to delete
INVITATIONS_SIGNUP_REDIRECT = 'users:register'
#INVITATIONS_LOGIN_REDIRECT = 'users:register'
# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
TIME_ZONE = 'America/New_York'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

# Also, see https://devcenter.heroku.com/articles/django-assets


# My Settings
LOGIN_URL = '/users/login/'

# To insure that jquery is not included twice via the debug_toolbar
DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL':'',
    }



#########################################################################
# Settings to support storage of static files and media files on AWS
#########################################################################
# Extra places for collectstatic to find static files.
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
MEDIA_ROOT = '/media/'

# AWS Static Files Config
AWS_STORAGE_BUCKET_NAME = os.environ.get('LOOPLA_AWS_S3_STORAGE_BUCKET_NAME')
AWS_SECURE_STORAGE_BUCKET_NAME = os.environ.get('LOOPLA_AWS_S3_SECURE_STORAGE_BUCKET_NAME')
AWS_ACCESS_KEY_ID = os.environ.get('LOOPLA_AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('LOOPLA_AWS_SECRET_ACCESS_KEY')
AWS_S3_ENDPOINT_URL = os.environ.get('LOOPLA_AWS_S3_HOST')
AWS_S3_REGION_NAME = os.environ.get('LOOPLA_AWS_S3_REGION_NAME')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
DEFAULT_FILE_STORAGE = 'prototype_1.s3utils.MediaRootS3Boto3Storage'
STATICFILES_STORAGE = 'prototype_1.s3utils.StaticRootS3Boto3Storage'
AWS_PRELOAD_METADATA = True

# URL Definitions
MEDIAFILES_LOCATION = 'media'
STATICFILES_LOCATION = 'static'

SERVER_SITE_ASSETS_FROM_S3 = os.environ.get('LOOPLA_SERVER_SITE_ASSETS_FROM_S3')
if SERVER_SITE_ASSETS_FROM_S3 == 'True':
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)
    SITE_RESOURCES_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    EMAIL_SITE_RESOURCES_URL = SITE_RESOURCES_URL
else:
    STATIC_URL = '/static/'
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)
    SITE_RESOURCES_URL = "/%s/" % (STATICFILES_LOCATION)
    EMAIL_SITE_RESOURCES_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    

# Used to retrieve static content deployed with the site


#########################################################################
# Logging Settings
#########################################################################
if os.environ.get('LOOPLA_VERBOSE_LOGGING_ENABLED') == 'True':
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            },
        },
    }

#########################################################################
# Google Authentication
#########################################################################
GOOGLE_OAUTH_CLIENT_ID = os.environ.get('LOOPLA_GOOGLE_OAUTH_CLIENT_ID')


#########################################################################
# Kudos
#########################################################################
KUDOS_ENABLED = os.environ.get('LOOPLA_KUDOS_ENABLED') == 'True'
KUDOS_STORE_ENABLED = os.environ.get('LOOPLA_KUDOS_STORE_ENABLED') == 'True'


#########################################################################
# Notifications
#########################################################################
NOTIFICATIONS_ENABLED = os.environ.get('LOOPLA_NOTIFICATIONS_ENABLED') == 'True'
NOTIFICATIONS_MAX_RETRY = int(os.environ.get('LOOPLA_NOTIFICATIONS_MAX_RETRY'))
NOTIFICATIONS_OVERRIDE_RECIPIENT = os.environ.get('LOOPLA_NOTIFICATIONS_OVERRIDE_RECIPIENT') == 'True'
NOTIFICATIONS_OVERRIDE_RECIPIENT_EMAIL_ADDRESS = os.environ.get('LOOPLA_NOTIFICATIONS_OVERRIDE_RECIPIENT_EMAIL_ADDRESS')
NOTIFICATIONS_OVERRIDE_RECIPIENT_TEXT_NUMBER = os.environ.get('LOOPLA_NOTIFICATIONS_OVERRIDE_RECIPIENT_TEXT_NUMBER')
NOTIFICATIONS_SERVICE_ADMIN_EMAIL_ADDRESS = os.environ.get('LOOPLA_NOTIFICATIONS_SERVICE_ADMIN_EMAIL_ADDRESS')
NOTIFICATIONS_NEW_INVITE_REMINDER_DAYS_REQUIRED = 7
NOTIFICATIONS_NEW_INVITE_REMINDER_NUMBER_MAX = 3


#########################################################################
# REDIS QUEUE Configuration
#########################################################################
REDIS_QUEUE_HOST = os.getenv('LOOPLA_REDIS_QUEUE_HOST')
REDIS_QUEUE_PORT = os.getenv('LOOPLA_REDIS_QUEUE_PORT')
REDIS_QUEUE_DB = os.getenv('LOOPLA_REDIS_QUEUE_DB')
REDIS_QUEUE_DEFAULT_TIMEOUT = os.getenv('LOOPLA_REDIS_QUEUE_DEFAULT_TIMEOUT')

RQ_QUEUES = None

if (os.getenv('REDISTOGO_URL')):
    RQ_QUEUES = {
        'default': {
            'URL': os.getenv('REDISTOGO_URL'), # If you're on Heroku
            'DEFAULT_TIMEOUT': REDIS_QUEUE_DEFAULT_TIMEOUT
        }
    }
else: 
    RQ_QUEUES = {
        'default': {
            'HOST': REDIS_QUEUE_HOST,
            'PORT': REDIS_QUEUE_PORT, 
            'DB': REDIS_QUEUE_DB,
            'DEFAULT_TIMEOUT': REDIS_QUEUE_DEFAULT_TIMEOUT
        }
    }

# RQ_QUEUES = {
#     'default': {
#         'HOST': 'localhost',
#         'PORT': 6379,
#         'DB': 0,
#         'DEFAULT_TIMEOUT': 360,
#     },
#     'with-sentinel': {
#         'SENTINELS': [('localhost', 26736), ('localhost', 26737)],
#         'MASTER_NAME': 'redismaster',
#         'DB': 0,
#         'SOCKET_TIMEOUT': None,
#         'CONNECTION_KWARGS': {
#             'socket_connect_timeout': 0.3
#         },
#     },
#     'high': {
#         'URL': os.getenv('REDISTOGO_URL', 'redis://localhost:6379/0'), # If you're on Heroku
#         'DEFAULT_TIMEOUT': 500,
#     },
#     'low': {
#         'HOST': 'localhost',
#         'PORT': 6379,
#         'DB': 0,
#     }
# }


#########################################################################
# Socket.IO
#########################################################################
SOCKET_IO_SERVER_HOST = os.getenv('LOOPLA_SOCKET_IO_SERVER_HOST')
SOCKET_IO_SERVER_PORT = os.getenv('LOOPLA_SOCKET_IO_SERVER_PORT')


#########################################################################
# Other
#########################################################################
"""
    RESTRICT_LOOP_CREATION
    Controlls whether or not loop creation is restricted to only specific
    loop members, or is generally available.

    If True, the creation of new loops is limited to the loops specified 
    in RESTRICT_LOOP_CREATION_ALLOWED_LOOPS.
"""
RESTRICT_LOOP_CREATION = (os.environ.get('LOOPLA_RESTRICT_LOOP_CREATION') == 'True')
RESTRICT_LOOP_CREATION_ALLOWED_LOOPS = os.environ.get('LOOPLA_RESTRICT_LOOP_CREATION_ALLOWED_LOOPS')

STRIPE_PRIVATE_KEY = os.environ.get('LOOPLA_STRIPE_PRIVATE_KEY')
STRIPE_PUBLIC_KEY = os.environ.get('LOOPLA_STRIPE_PUBLIC_KEY')


DJANGO_SETTINGS_MODULE='settings rq worker high default low'

ADMIN_LOOP = os.environ.get('LOOPLA_ADMIN_LOOP')


