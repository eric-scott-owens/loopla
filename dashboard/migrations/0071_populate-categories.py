# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2019-06-18 18:54
from __future__ import unicode_literals
import csv, os
from django.conf import settings
from django.db import migrations, models
from dashboard.models import Category, Tag

"""
Description: 

  Creates the specified hierarchy of models linked to the parents
  specified in a hierarchy path.

  The operation will also generate parent categories in the path
  if the specified parents do not already exist

Inputs:
  
  model: (MPPTModel)
    The MPTTModel based model type for which entities should be
    generated.
  
  heirarchy_path: (String)
    A slash delimited string indicating the hierarchal path to a 
    specific node
    
    IE: <Parent>/<Child>/<GrandChild> || Sports/Field/Football

Returns: 

  The most specific node specified by the hierarchy path
"""

def get_or_create_category(category_path):
  if category_path.isspace():
    return None

  path_segments = category_path.lower().split('/')

  # Work from the parent segment to the leaf segment and ensure
  # each level exists in the database
  segment_parent = None
  for segment in path_segments:
    if segment and not segment.isspace():

      # Get or create the current category segment
      if not Category.objects.filter(name=segment, parent=segment_parent).exists():
        leaf = Category.objects.create(name=segment, parent=segment_parent)
        leaf.save()
        leaf = Category.objects.get(pk=leaf.id)
      else:
        leaf = Category.objects.get(name=segment, parent=segment_parent)

      # update the parent for the next child segment
      segment_parent = leaf

  return segment_parent # return the last descendant category specified in the path


def get_or_create_tag(tag_path):
  if tag_path.isspace():
    return None

  path_segments = tag_path.lower().split('/')

  # Work from the parent segment to the leaf segment and ensure
  # each level exists in the database
  segment_parent = None
  for segment in path_segments:
    if segment and not segment.isspace():

      # Get or create the current tag segment
      tag_query = Tag.objects.filter(name=segment)
      tag_query_count = tag_query.count()

      if tag_query_count == 0:
        leaf = Tag.objects.create(name=segment, parent=segment_parent)
      else:
        if tag_query_count == 1:
          leaf = Tag.objects.get(name=segment)
          if not leaf.parent and segment_parent:
            segment_parent = Tag.objects.get(pk=segment_parent.id)
            leaf = Tag.objects.get(name=segment)
            leaf.parent = segment_parent
            leaf.save()
            leaf = Tag.objects.get(name=segment)
        else:
          leaf = Tag.objects.get(name=segment, parent=segment_parent)

      # update the parent for the next child segment
      segment_parent = leaf

  return segment_parent # return the last descendant category specified in the path


def populate_and_link_tags_and_categories(apps, schema_editor):
  file_path = os.path.join(settings.BASE_DIR, 'dashboard/migrations/0071_google_category_mapping.csv')
  with open(file_path) as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    line_count = 0
    for row in csv_reader:
      if line_count == 0:
        line_count += 1
        continue

      tag_path = row[0]
      leaf_tag = get_or_create_tag(tag_path)

      category_paths = row[1].split(', ')
      for category_path in category_paths:
        leaf_category = get_or_create_category(category_path)

        if leaf_category and leaf_tag:
          leaf_tag.categories.add(leaf_category)
          leaf_tag.save()

      line_count += 1
    print(f'Processed {line_count} lines.')


def reset_tag_trees(apps, schema_editor):
  Tag.objects.rebuild()


class Migration(migrations.Migration):

  dependencies = [
    ('dashboard', '0070_add-new-categories'),
  ]

  operations = [
    migrations.RunSQL(['UPDATE dashboard_tag SET lft=0, rght=0, tree_id=0, level=0, parent_id=NULL']),
    migrations.AddField(
      model_name='category',
      name='always_show_in_menus',
      field=models.BooleanField(default=False),
    ),
    migrations.RunPython(reset_tag_trees),
    migrations.RunPython(populate_and_link_tags_and_categories)
  ]
